#!python

"""
Global mean near surface air temperature

The script produces the global mean near surface air temperature time series

CMIP5 model has been downloaded to the server with the data structure setting as
"~/CMIP5/product/institute/model/experiment/
    time_frequency/realm/cmor_table/ensemble/variable/"

The data storing structure is defined by the wget script generated by the
RESTful API provided by the ESGF.
Detail instructure of how to utilize this API can be find at
https://www.earthsystemcog.org/projects/cog/esgf_search_restful_api

Global mean near surface air temperature use the CMIP5 model output
"tas" which represents the near surface temperature usually measured
at around 2 m above the surface. The variable should not be confused with
skin temperature which has the output name of "ts".

"""

import os
import sys
import datetime
import cftime
import numpy as np
import xarray as xr
import pandas as pd
from sphere_area import cal_area

#### Define the base directory
basedir=os.getcwd()
databasedir=basedir+'/data/'

#### read in the model names
model_info=pd.read_excel('%s/info/CMIP5_Models_Grid_Resolution_vERC.xlsx'\
                        %(basedir),header=0)
model_name=model_info['CMIP5 Model']
institude_name=model_info['Institute'].unique()

model_ens=pd.read_excel('%s/info/CMIP5_ensembles.xlsx'%(basedir),header=0)
all_ensemble=model_ens['ensemble_members']


#### function calculate GMST in CMIP model
def cmip_gmst(databasedir,p,i,m,e,t,r,c,ens,v,starttime,endtime):
    pickfile=[]
    pickfile_syear=[]
    datadir=os.path.join(databasedir,"CMIP5",p,i,m,e,t,r,c,ens,v)
    if os.path.isdir(datadir):
        print datadir
        for file in os.listdir(datadir):
            if file.endswith(".nc"):
                if file.startswith(v):
                    syear=np.int(file[-16:-16+4])
                    smon=np.int(file[-12:-12+2])
                    fyear=np.int(file[-9:-9+4])
                    fmon=np.int(file[-5:-5+2])
                    if (syear >= starttime and syear <= endtime) \
                      or (fyear >= starttime and fyear <= endtime) :
                        pickfile_syear.append(syear)
                        pickfile.append(file)
    else :
        return None, None, None, None

    if len(pickfile)>0:
        #### sort the file order by year
        # through linking the syear array with filename array
        pickfile_syear, pickfile = \
        (list(t) for t in zip(*sorted(zip(pickfile_syear, pickfile))))

        #### calculate area for each Model Grid
        datafile=os.path.join(datadir,pickfile[0])
        try:
            ds_tas=xr.open_dataset(datafile)
        except IOError:
            print "-----"
            print "-First file broken (skip entire experiement)"
            print datafile
            print "-----"
            return datadir,pickfile,None,None
        except ValueError:
            print "Time dimension cannot be decoded in xarray"
            print "because the time array is out of range "
            print "please make sure the time array is rebased correctly"
            ds_tas=xr.open_dataset(datafile,decode_times=False)
            print "current unit: ",ds_tas.time.units
            ds_tas.time.attrs['units']='days since %i-01-01'%(pickfile_syear[0])
            ds_tas.time.values=\
                xr.cftime_range("%i"%(pickfile_syear[0]), \
                periods=ds_tas.time.values.size, freq='MS', \
                calendar='noleap')

        area=np.zeros([len(ds_tas.lat),len(ds_tas.lon)])
        for lon_ind in range(len(ds_tas.lon)):
            try :
                dlon=np.abs(ds_tas.lon_bnds[lon_ind][1].values\
                            -ds_tas.lon_bnds[lon_ind][0].values)
            # EC-EARCH RCP85
            except AttributeError:
                dlon=np.abs(ds_tas.lon_bounds[lon_ind][1].values\
                            -ds_tas.lon_bounds[lon_ind][0].values)
            lon=ds_tas.lon.values[lon_ind]

            for lat_ind in range(len(ds_tas.lat)):
                try:
                    dlat=np.abs(ds_tas.lat_bnds[lat_ind][1].values\
                                -ds_tas.lat_bnds[lat_ind][0].values)
                # EC-EARCH RCP85
                except AttributeError:
                    dlat=np.abs(ds_tas.lat_bounds[lat_ind][1].values\
                                -ds_tas.lat_bounds[lat_ind][0].values)
                lat=ds_tas.lat.values[lat_ind]

                area[lat_ind,lon_ind]=\
                cal_area(lon,lat,dlon,dlat)['area']/(1.e4) # cm^2 to m^2
        da_area=xr.DataArray(area,\
                 coords=[ds_tas.lat.values, ds_tas.lon.values],\
                 dims=['lat', 'lon'])
        glo_area=da_area.sum()
        print ("Finish Calculate the area of each grid")

        #### dealing with individual file
        for file in pickfile:
            datafile=os.path.join(datadir,file)
            try:
                ds_tas=xr.open_dataset(datafile)
            except IOError:
                print "-----"
                print "file broken:",file
                print datafile
                print "-----"
                return datadir,pickfile,None, None

            #### area weighted and change unit from K to Celcius
            da_tas_areaweighted=(ds_tas.tas-273.15)*da_area

            if file == pickfile[0]:
                da_gmst=\
                  da_tas_areaweighted.sum(dim=['lon','lat'])/glo_area
            else :
                da_temp=\
                  da_tas_areaweighted.sum(dim=['lon','lat'])/glo_area
                try :
                    da_gmst=xr.concat([da_gmst,da_temp],dim='time')
                # EC-EARCH RCP85
                except ValueError:
                    print 'weird file with inconsistent dimension'
                    break

        #### create timestamp for easy plotting
        timestamp=[]
        for tt in range(len(da_gmst.time.values)):
            try:
                # Ori time can sep to year month day
                timestamp.append(\
                    datetime.datetime(da_gmst.time.values[tt].year\
                                     ,da_gmst.time.values[tt].month\
                                     ,da_gmst.time.values[tt].day))

            except AttributeError:
                # Ori time is in np.datetime64
                timestamp.append(\
                    datetime.datetime(da_gmst['time.year'].values[tt]\
                                     ,da_gmst['time.month'].values[tt]\
                                     ,da_gmst['time.day'].values[tt]))

        #### cropping the time series
        ind=[]
        timestamp_crop=[]
        for tt in range(len(timestamp)):
            if timestamp[tt].year >= starttime \
               and timestamp[tt].year <= endtime:
                ind.append(tt)
                timestamp_crop.append(timestamp[tt])


        #### store global mean time series in xr.Dataset
        ds_gmst=xr.Dataset()
        da_gmst_timestamp=xr.DataArray(da_gmst.values[np.array(ind)]\
                            ,coords={'time':timestamp_crop}\
                            ,dims=['time'])
        ds_gmst['gmst_area_weighted']=da_gmst_timestamp


        #### calculate climatology
        clim_aw=np.zeros(12)
        clim_count=np.zeros(12)
        for mon in range(12):
            for tind in range(len(ds_gmst['time'].values)):
                try:
                    ds_gmst_time=ds_gmst['time'].values[tind].month
                except AttributeError:
                    ds_gmst_time=ds_gmst['time.month'].values[tind]

                if ds_gmst_time == mon+1 :
                    clim_aw[mon]+=\
                              ds_gmst.gmst_area_weighted.isel(time=tind)
                    clim_count[mon]+=1
        clim_aw=clim_aw/clim_count

        #### remove climatology
        gmst_aw_noclim=np.zeros(len(ds_gmst['time'].values))
        for mon in range(12):
            for tind in range(len(ds_gmst['time'].values)):
                try:
                    ds_gmst_time=ds_gmst['time'].values[tind].month
                except AttributeError:
                    ds_gmst_time=ds_gmst['time.month'].values[tind]

                if ds_gmst_time == mon+1 :
                    gmst_aw_noclim[tind]=\
                          ds_gmst.gmst_area_weighted.isel(time=tind)\
                          -clim_aw[mon]

        da_gmst_aw_noclim=xr.DataArray(gmst_aw_noclim,\
                            coords={'time':timestamp_crop},\
                            dims=['time'])
        ds_gmst['gmst_area_weighted_noclim']=da_gmst_aw_noclim


        #### calculate the yearly mean
        gmst_year_aw=np.zeros(endtime-starttime+1)
        year_count=np.zeros(endtime-starttime+1)
        year_arr=range(starttime,endtime+1)
        for yy in range(len(year_arr)):
            for tind in range(len(ds_gmst['time'].values)):
                try:
                    ds_gmst_time=ds_gmst['time'].values[tind].year
                except AttributeError:
                    ds_gmst_time=ds_gmst['time.year'].values[tind]

                if ds_gmst_time == year_arr[yy] :
                    gmst_year_aw[yy]+=\
                             ds_gmst.gmst_area_weighted.isel(time=tind)
                    year_count[yy]+=1
            # if the monthly data is less than 10 months
            #   yearly mean is not assigned (=NaN)
            if year_count[yy]<11:
                year_count[yy]=np.nan
        gmst_year_aw=gmst_year_aw/year_count


        #### store global mean time series in xr.Dataset
        yr_timestamp=[]
        for yy in range(len(year_arr)):
            yr_timestamp.append(datetime.datetime(year_arr[yy],1,15))

        ds_gmst_yr=xr.Dataset()
        da_gmst_year_aw=xr.DataArray(gmst_year_aw,\
                          coords={'time':yr_timestamp},\
                          dims=['time'])
        ds_gmst_yr['gmst_area_weighted']=da_gmst_year_aw

        return datadir,pickfile,ds_gmst_yr,ds_gmst


if __name__ == '__main__':

    if len(sys.argv)<1 :
        #### option setting (to find data in the corresponding directory)
        # -- RCP run
        product=['output1']
        institute=institude_name
        # model=model_name
        model=['CCSM4']
        experiment=['rcp45']
        time_frequency=['mon']
        realm=['atmos']
        cmor_table=['Amon']
        ensemble=['r1i1p1']
        variable=['tas']

        starttime=2006
        endtime=2100


        # #### option setting (to find data in the corresponding directory)
        # # -- hist. run
        # product=['output1']
        # institute=institude_name
        # # model=model_name
        # # model=['CESM1(BGC)','CESM1(CAM5)','ACCESS1.0','ACCESS1.3']
        # model=['BCC-CSM1.1']
        # experiment=['historical']
        # time_frequency=['mon']
        # realm=['atmos']
        # cmor_table=['Amon']
        # ensemble=['r1i1p1']
        # variable=['tas']

        # starttime=1850
        # endtime=2005

    elif len(sys.argv)==12:
        product=[str(sys.argv[1])]
        institute=[str(sys.argv[2])]
        model=[str(sys.argv[3])]
        experiment=[str(sys.argv[4])]
        time_frequency=[str(sys.argv[5])]
        realm=[str(sys.argv[6])]
        cmor_table=[str(sys.argv[7])]
        ensemble=[str(sys.argv[8])]
        variable=[str(sys.argv[9])]
        starttime=int(sys.argv[10])
        endtime=int(sys.argv[11])


    #### find data in the corresponding directory
    for p in product:
     for i in institute:
      for m in model:
       for e in experiment:
        for t in time_frequency:
         for r in realm:
          for c in cmor_table:
           for ens in ensemble:
            for v in variable:

                datadir,pickfile,ds_gmst_yr,ds_gmst=\
                    cmip_gmst(databasedir,p,i,m,e,t,r,c,ens,v,starttime,endtime)

                if ds_gmst_yr is not None or ds_gmst is not None :
                    #### output netcdf file
                    try :
                        ds_gmst.to_netcdf(\
                               os.path.join(datadir,'gmtas_%s%i_%i.nc'\
                               %(pickfile[0][:-16],starttime,endtime)),mode='w')
                        ds_gmst_yr.to_netcdf(\
                               os.path.join(datadir,'gmtas_yr_%s%i_%i.nc'\
                               %(pickfile[0][:-16],starttime,endtime)),mode='w')
                    except IOError:
                        os.remove(os.path.join(datadir,'gmtas_%s%i_%i.nc'\
                                        %(pickfile[0][:-16],starttime,endtime)))
                        os.remove(os.path.join(datadir,'gmtas_yr_%s%i_%i.nc'\
                                        %(pickfile[0][:-16],starttime,endtime)))
                        ds_gmst.to_netcdf(\
                               os.path.join(datadir,'gmtas_%s%i_%i.nc'\
                               %(pickfile[0][:-16],starttime,endtime)),mode='w')
                        ds_gmst_yr.to_netcdf(\
                               os.path.join(datadir,'gmtas_yr_%s%i_%i.nc'\
                               %(pickfile[0][:-16],starttime,endtime)),mode='w')
